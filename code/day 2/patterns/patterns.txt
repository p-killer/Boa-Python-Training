Patterns are best practises implemented in Object Oriented Programming
for reusability,extensibility, flexibility,scalability,maintainability,loosly coupled and resource management

Creational Patterns:
------------------
Singleton - Singleton design pattern make sure that there is only one instance of an object is created.
Factory Method - It allows us to create object without specifying the exact class to create.
Abstract Factory- It allows us to create objects without specifying their concrete type.
Builder - It is used to create the complex objects.
Prototype - It is used to create a new object from the existing object.

Structural patterns:
------------------
Structural Design Patterns mainly responsible for assemble object and classes
 into a larger structure making sure that these structure should be flexible and efficient. 
  Very essential for enhancing readability and maintainability of the code.
  It also ensure that functionalities are properly separated, encapsulated. 
  It reduces the minimal interface between interdependent things.

Adapter - It provides us for two incompatible classes to work together by wrapping an interface 
                 around one of the existing classes.
Composite - It wraps a group of objects into a single object.
Bridge - It decouples an abstraction so that two classes can vary independently.
Decorator - It extends the object behavior dynamically at the run time.
Facade - It offers a simple interface to more complex underlying objects.
Flyweight - It decreases the cost of complex object model.
Proxy - It reduces the cost, reduce complexity, and provide the placeholder interface 
             to an underlying object to control access.

Behavior patterns:
----------------
Behavior Design Patterns are responsible for how one class communicates with others
and states are mananged with data binding.

Iterator - It accesses all the element of an object sequentially without violating its 
                underlying representation.

Chain of Responsibility - It representatives the command to a chain of processing object.
Command - It generates the objects which encapsulate actions of parameters.
Interpreter - It implements a specialized language.
Mediator - It provides the loose coupling between classes by being the only class 
                  that has detailed knowledge of their existing methods.

Memento - It restores an object in the previous state. 
Observer - It allows a number of observer objects to see an event for data binding
State - It allows an object to modify its behavior when it's internal states changes.
Strategy - It provides one of the families of algorithm to be selected at the runtime.
===========================================================================